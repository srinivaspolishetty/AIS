{"version":3,"sources":["webpack:///./src/app/common/services/commandmanagement.api.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAA2C;AACoB;AACC;AAKhE;IAEI,qCAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAE1C,gBAAW,GAAG;YACV,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,8BAA8B,EAAE,gDAAgD;gBAChF,eAAe,EAAE,eAAe;aACnC,CAAC;SACL,CAAC;IAR4C,CAAC;IAS/C,2DAAqB,GAArB,UAAsB,aAAa;QAC/B,IAAM,GAAG,GAAG,KAAG,qEAAW,CAAC,OAAO,GAAG,qEAAW,CAAC,OAAO,iBAAc,CAAC;QACvE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACtE,CAAC;IAED,oDAAc,GAAd,UAAe,IAAY,EAAE,IAAY,EAAE,UAAkB,EAAE,WAAmB;QAC9E,IAAI,GAAG,GAAG,KAAG,qEAAW,CAAC,OAAO,GAAG,qEAAW,CAAC,OAAO,iBAAc,CAAC;QACrE,GAAG,IAAI,WAAS,IAAI,cAAS,IAAI,oBAAe,UAAU,qBAAgB,WAAa,CAAC;QACxF,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IACD,uDAAiB,GAAjB,UAAkB,IAAY;QAC1B,IAAI,GAAG,GAAG,KAAG,qEAAW,CAAC,OAAO,GAAG,qEAAW,CAAC,OAAO,oBAAiB,CAAC;QACxE,GAAG,IAAI,kBAAgB,IAAM,CAAC;QAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IAzBQ,2BAA2B;QAHvC,gEAAU,CAAC;YACR,UAAU,EAAE,MAAM;SACrB,CAAC;yCAGkC,+DAAU;OAFjC,2BAA2B,CA0BvC;IAAD,kCAAC;CAAA;AA1BuC","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommandManagementServiceApi {\r\n\r\n    constructor(private httpClient: HttpClient) { }\r\n\r\n    httpOptions = {\r\n        headers: new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\r\n            'Authorization': 'my-auth-token'\r\n        })\r\n    };\r\n    sendActivationRequest(packetDetails) {\r\n        const url = `${environment.apiBase}${environment.version}/executeTask`;\r\n        return this.httpClient.post(url, packetDetails, this.httpOptions);\r\n    }\r\n\r\n    getCommandList(page: Number, size: Number, searchDate: string, searchValue: string) {\r\n        let url = `${environment.apiBase}${environment.version}/taskDetails`;\r\n        url += `?page=${page}&size=${size}&searchDate=${searchDate}&searchValue=${searchValue}`;\r\n        return this.httpClient.get(url);\r\n    }\r\n    getpayloadDetails(type: string) {\r\n        let url = `${environment.apiBase}${environment.version}/smsPacketTypes`;\r\n        url += `?commandType=${type}`;\r\n        return this.httpClient.get(url);\r\n    }\r\n}\r\n"],"sourceRoot":""}