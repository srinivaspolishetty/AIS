import { Component, OnInit } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { NgbDateStruct, NgbCalendar } from '@ng-bootstrap/ng-bootstrap';
import { DeviceManagementServiceApi } from "../common/services/devicemanagement.api";
import { DeviceDetails } from "../common/models/devicedetails.model";
import { DeviceactivationComponent } from "./deviceactivation/deviceactivation.component";
import { PageModel } from "../common/models/page.model";
import { NgbDateFRParserFormatter } from "../common/directives/dateformatter";
import { DevicedetailsComponent } from "./devicedetails/devicedetails.component";
import { CommandManagementServiceApi } from "../common/services/commandmanagement.api";
import { ToasterService } from "../common/services/toaster.service";

@Component({
  selector: 'app-devicedetails',
  templateUrl: './devices.component.html',
  styleUrls: ['./devices.component.css']
})
export class DevicesComponent implements OnInit {
  public showFilters : boolean = false;
  public page : PageModel;
  public p : number;
  model: NgbDateStruct;
  public formatDate : string;
  public searchValue : string;
  public showSearchClear = false;
  public noData : boolean = false;
  deviceData : Array<DeviceDetails> = [];
  constructor(private devicemanagementApiService : DeviceManagementServiceApi,
    private modalService: NgbModal, private calendar: NgbCalendar,
    private ngbDateFRParserFormatter: NgbDateFRParserFormatter,
    private commandmanagementApiService: CommandManagementServiceApi,
    private toasterService: ToasterService) { 
    this.page = new PageModel(0, 0, 0, 0);
    this.page = new PageModel(0, 0, 0, 0);
    this.searchValue = '';
  }

  ngOnInit() {
    this.getAllDeviceDetails(0,10);
  }

  cmdHealthDevice(device, headerType, messageText){
    const newobj = new Object(
      {
        header: headerType,
        imeiNumber: device.imeiNumber,
      }
    );
    console.log(newobj);
    this.commandmanagementApiService.sendActivationRequest(JSON.stringify(newobj))
    .subscribe((data: any) => {
      this.toasterService.showSuccess('bottom-right', 'Successfully Sent '+messageText+' Message.');
    }, error => {
      console.log('error', error);
      this.toasterService.showError('bottom-right', 'ERROR: Unable to Sent '+messageText+' Message.');
    }
    );
  }

  activateDevice(curDevice) {
    const modalRef = this.modalService.open(DeviceactivationComponent, { size : 'lg', backdrop: 'static',
    keyboard: false });
    modalRef.componentInstance.deviceDetails = curDevice;
  }

  changeDate() {
    this.getAllDeviceDetails(0,10);
  }
  searchData() {
    this.getAllDeviceDetails(0,10);
    this.showSearchClear = (this.searchValue.length > 4) ? true : false;
  }
  clearSearch() {
    this.searchValue = '';
    this.showSearchClear = false;
    this.searchData();
  }
  deviceDetailspopup(deviceDetails, eventType) {
    deviceDetails.selectedEvent  = eventType;
    const modalRef = this.modalService.open(DevicedetailsComponent, { size : 'lg', backdrop: 'static',
    keyboard: false });
    modalRef.componentInstance.selectedDeviceDetails = deviceDetails;
    modalRef.result.then((result) => {
      if (result === 'refreshContent') {
        this.getAllDeviceDetails(0,10);
      }
    }).catch((error) => {
    })
  }

  btnShowFilters(){
    this.showFilters = !this.showFilters;
  }

  pageChanged(event) {
    this.p = event;
    this.getAllDeviceDetails(this.p-1,10);
  }
  getAllDeviceDetails(page:number, size:number) {
    this.formatDate = this.ngbDateFRParserFormatter.format(this.model);
    this.devicemanagementApiService.getDeviceDetails(page,size,this.formatDate,this.searchValue)
    .subscribe((data : DeviceDetails) => {
      this.deviceData = data.content;
      this.noData = (this.deviceData.length > 0);
      this.page = data.page;
      console.log(this.deviceData);
    });
  }

}
