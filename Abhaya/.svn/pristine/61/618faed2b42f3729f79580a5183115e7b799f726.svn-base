import { Component, OnInit } from '@angular/core';
import {Router} from '@angular/router';
import { NgbDateStruct, NgbCalendar } from '@ng-bootstrap/ng-bootstrap';
import { NgbDateFRParserFormatter } from "../../common/directives/dateformatter";
import { PageModel } from "../../common/models/page.model";
import { TripManagementServiceApi } from "../../common/services/tripnamagement.api";
import { Tripdetails } from "../../common/models/tripdetails.model";
import { ToasterService } from "../../common/services/toaster.service";

@Component({
  selector: 'app-tripdetails',
  templateUrl: './tripdetails.component.html',
  styleUrls: ['./tripdetails.component.css']
})
export class TripdetailsComponent implements OnInit {

  public tripDetailsData: Tripdetails;
  public page: PageModel;
  public model: NgbDateStruct;
  public p: number;
  public showSearchClear = false;
  public showFilters : boolean = false;
  public formatDate : string;
  public searchValue : string;
  public tripView : boolean = false;
  public tripType : boolean = false;

  constructor(private tripdetailsApi: TripManagementServiceApi,
    private toasterService: ToasterService, private router: Router,  private ngbDateFRParserFormatter: NgbDateFRParserFormatter,) {
    this.page = new PageModel(0, 0, 0, 0);
    this.searchValue = '';
  }

  ngOnInit() {
    this.getTripDetails(0, 10);
  }

  btnShowFilters(){
    this.showFilters = !this.showFilters;
  }

  changeDate(){
    this.getTripDetails(0, 10);
  }
  clearSearch() {
    this.searchValue = '';
    this.showSearchClear = false;
    this.searchData();
  }
  searchData() {
    this.getTripDetails(0, 10);
    this.showSearchClear = (this.searchValue.length > 4) ? true : false;
  }
  pageChanged(event) {
    this.p = event;
    this.getTripDetails(this.p - 1, 10);
  }
  viewTrip(details){
    this.router.navigate(['tripmanagement/tripcreate'],
      {
        queryParams: { tripId: details.tripId},
        queryParamsHandling: 'merge'
      });
  }
  openclosedTrips(){
    this.tripView = !this.tripView;
    this.getTripDetails(0, 10);
  }
 
  changeTripType(triptype){
    this.tripType = triptype;
    this.getTripDetails(0, 10);
  }
 
  endTrip(tripdetails) {
    const newobj = new Object(
      {
        imeiNumber: tripdetails.imeiNumber,
        tripClosed: true
      }
    );
    this.tripdetailsApi.endTrip(JSON.stringify(newobj))
      .subscribe((data: any) => {
        this.getTripDetails(0, 10);
        this.toasterService.showSuccess('bottom-right', 'Trip has been successfully closed ');
      }, error => {
        console.log('error', error);
        this.toasterService.showError('bottom-right', 'ERROR: Unable to close the Trip.');
      }
      );
  }
  getTripDetails(page, size) {
    this.formatDate = this.ngbDateFRParserFormatter.format(this.model);
    this.tripdetailsApi.getAllTripDetails(page, size, this.formatDate, this.searchValue, this.tripView, this.tripType)
      .subscribe((data: Tripdetails) => {
        this.tripDetailsData = data.content;
        this.page = data.page;
        console.log(this.tripDetailsData);
      });
  }

}
