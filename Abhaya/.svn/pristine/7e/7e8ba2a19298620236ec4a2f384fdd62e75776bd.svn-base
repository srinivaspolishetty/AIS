import { Component, OnInit, Input } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { PageModel } from "../common/models/page.model";
import { NgbDateStruct, NgbCalendar } from '@ng-bootstrap/ng-bootstrap';
import { Router, ActivatedRoute } from '@angular/router';
import { AddeditsystempropComponent } from "./addeditsystemprop/addeditsystemprop.component";
import { SystemManagement } from "../common/models/systemmanagement.model";
import { SystemManagementServiceApi } from "../common/services/systemmanagement.api";
import { NgbDateFRParserFormatter } from "../common/directives/dateformatter";

@Component({
  selector: 'app-systemproperties',
  templateUrl: './systemproperties.component.html',
  styleUrls: ['./systemproperties.component.css']
})
export class SystempropertiesComponent implements OnInit {

  public systemProperties : SystemManagement;
  public showFilters : boolean = false;
  public page: PageModel = new PageModel();
  public p : number;
  model: NgbDateStruct;
  public showSearchClear = false;
  public searchValue : string = '';
  public formatDate : string;

  constructor(private modalService: NgbModal, private systemPropertiesApi : SystemManagementServiceApi, private router: Router,  private ngbDateFRParserFormatter: NgbDateFRParserFormatter) { 
  }
  
  ngOnInit() {
    this.getSystemProperties(0, 10);
  }
  changeDate() {
    this.getSystemProperties(0,10);
  }
  searchData() {
    this.getSystemProperties(0,10);
    this.showSearchClear = (this.searchValue.length > 4) ? true : false;
  }
  clearSearch() {
    this.searchValue = '';
    this.showSearchClear = false;
    this.searchData();
  }
  pageChanged(event) {
    this.p = event;
    this.getSystemProperties(this.p-1,10);
  }
  btnShowFilters(){
    this.showFilters = !this.showFilters;
  }
  addEditDetails(details){
    const modalRef = this.modalService.open(AddeditsystempropComponent, { size : 'lg', backdrop: 'static',
    keyboard: false });
    modalRef.componentInstance.systemPropertiesDetails = details;
    modalRef.result.then((result) => {
      if (result === 'refreshContent') {
        this.getSystemProperties(0, 10);
      }
    }).catch((error) => {
    })
  }

  getSystemProperties(page, size){
    this.formatDate = this.ngbDateFRParserFormatter.format(this.model);
    this.systemPropertiesApi.getAllSystemProperties(page, size, this.formatDate, this.searchValue)
    .subscribe((data : SystemManagement) => {
      this.systemProperties = data.content;
      this.page = data.page;
      console.log(this.systemProperties);
    });
  }
}
