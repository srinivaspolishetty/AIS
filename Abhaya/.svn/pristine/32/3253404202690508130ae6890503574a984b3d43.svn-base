import { Component, OnInit } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { Router, ActivatedRoute } from '@angular/router';
import { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';
import { DeviceManagementServiceApi } from '../../common/services/devicemanagement.api';
import { DeviceCommunication } from '../../common/models/devicecommunication.model';
import { PageModel } from '../../common/models/page.model';
import { NgbDateFRParserFormatter } from '../../common/directives/dateformatter';
import { DevicecomdetailsComponent } from './devicecomdetails/devicecomdetails.component';
import { environment } from '../../../environments/environment';

@Component({
    selector: 'app-devicecommunication',
    templateUrl: './devicecommunication.component.html',
    styleUrls: ['./devicecommunication.component.css']
})
export class DevicecommunicationComponent implements OnInit {
    public showFilters: Boolean = false;
    public page: PageModel = new PageModel();
    public pageSize: Number = environment.pageSize;
    public intilPageNumber: Number = 0;
    public p: number;
    public action: string;
    public actionValue: string;
    model: NgbDateStruct;
    public formatDate: string;
    public searchValue: string;
    public pageSizeValues = [];
    public showSearchClear = false;
    public isDataExists: Boolean = false;
    deviceCommData: Array<DeviceCommunication> = [];
    constructor(private devicemanagementApiService: DeviceManagementServiceApi, private modalService: NgbModal,
        private ngbDateFRParserFormatter: NgbDateFRParserFormatter,
        private activatedRoute: ActivatedRoute) {
        this.searchValue = '';
        this.pageSizeValues = [10, 50, 100, 200];
    }

    ngOnInit() {
        this.activatedRoute.queryParams.subscribe(params => {
            this.action = params['action'];
            this.actionValue = params['actionValue'];
            this.getAllDeviceCommunication(this.intilPageNumber, this.pageSize, this.action, this.actionValue);
        });
    }

    deviceComDetails(deviceComDetails) {
        const modalRef = this.modalService.open(DevicecomdetailsComponent, {
            size: 'lg', backdrop: 'static',
            keyboard: false
        });
        modalRef.componentInstance.selectedComDetails = deviceComDetails;
    }

    btnShowFilters() {
        this.showFilters = !this.showFilters;
    }
    changeDate() {
        this.getAllDeviceCommunication(this.intilPageNumber, this.pageSize, this.action, this.actionValue);
        this.p = 1;
    }
    searchData() {
        this.showSearchClear = (this.searchValue.length > 4);
        this.p = 1;
        this.getAllDeviceCommunication(this.intilPageNumber, this.pageSize, this.action, this.actionValue);
    }
    refreshPage() {
        this.searchValue = '';
        this.model = undefined;
        this.getAllDeviceCommunication(this.intilPageNumber, this.pageSize, this.action, this.actionValue);
    }
    clearSearch() {
        this.searchValue = '';
        this.searchData();
    }
    changePageSize() {
        this.getAllDeviceCommunication(this.intilPageNumber, this.pageSize, this.action, this.actionValue );
    }
    pageChanged(event) {
        this.p = event;
        this.getAllDeviceCommunication(this.p - 1, this.pageSize, this.action, this.actionValue);
    }
    getAllDeviceCommunication(page: Number, size: Number, action: string, actionValue: string) {
        this.formatDate = this.ngbDateFRParserFormatter.format(this.model);
        this.devicemanagementApiService.getDeviceCommDetails(page, size, this.formatDate, this.searchValue, action, actionValue)
            .subscribe((data: DeviceCommunication) => {
                this.deviceCommData = data.content;
                this.isDataExists = (this.deviceCommData.length > 0);
                this.page = data.page;
                console.log(this.deviceCommData);
            });
    }

}
